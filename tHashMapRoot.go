package hamt

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

type _HashMapRoot struct {
	hashAlg    _String
	bucketSize _Int
	_map       _Bytes
	data       _List__Element
}
type HashMapRoot = *_HashMapRoot

func (n _HashMapRoot) FieldHashAlg() String {
	return &n.hashAlg
}
func (n _HashMapRoot) FieldBucketSize() Int {
	return &n.bucketSize
}
func (n _HashMapRoot) FieldMap() Bytes {
	return &n._map
}
func (n _HashMapRoot) FieldData() List__Element {
	return &n.data
}

type _HashMapRoot__Maybe struct {
	m schema.Maybe
	v HashMapRoot
}
type MaybeHashMapRoot = *_HashMapRoot__Maybe

func (m MaybeHashMapRoot) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeHashMapRoot) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeHashMapRoot) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeHashMapRoot) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeHashMapRoot) Must() HashMapRoot {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__HashMapRoot_HashAlg    = _String{"hashAlg"}
	fieldName__HashMapRoot_BucketSize = _String{"bucketSize"}
	fieldName__HashMapRoot_Map        = _String{"map"}
	fieldName__HashMapRoot_Data       = _String{"data"}
)
var _ ipld.Node = (HashMapRoot)(&_HashMapRoot{})
var _ schema.TypedNode = (HashMapRoot)(&_HashMapRoot{})

func (HashMapRoot) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n HashMapRoot) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "hashAlg":
		return &n.hashAlg, nil
	case "bucketSize":
		return &n.bucketSize, nil
	case "map":
		return &n._map, nil
	case "data":
		return &n.data, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n HashMapRoot) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (HashMapRoot) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"hamt.HashMapRoot"}.LookupByIndex(0)
}
func (n HashMapRoot) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n HashMapRoot) MapIterator() ipld.MapIterator {
	return &_HashMapRoot__MapItr{n, 0}
}

type _HashMapRoot__MapItr struct {
	n   HashMapRoot
	idx int
}

func (itr *_HashMapRoot__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 4 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__HashMapRoot_HashAlg
		v = &itr.n.hashAlg
	case 1:
		k = &fieldName__HashMapRoot_BucketSize
		v = &itr.n.bucketSize
	case 2:
		k = &fieldName__HashMapRoot_Map
		v = &itr.n._map
	case 3:
		k = &fieldName__HashMapRoot_Data
		v = &itr.n.data
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_HashMapRoot__MapItr) Done() bool {
	return itr.idx >= 4
}

func (HashMapRoot) ListIterator() ipld.ListIterator {
	return nil
}
func (HashMapRoot) Length() int {
	return 4
}
func (HashMapRoot) IsAbsent() bool {
	return false
}
func (HashMapRoot) IsNull() bool {
	return false
}
func (HashMapRoot) AsBool() (bool, error) {
	return mixins.Map{"hamt.HashMapRoot"}.AsBool()
}
func (HashMapRoot) AsInt() (int, error) {
	return mixins.Map{"hamt.HashMapRoot"}.AsInt()
}
func (HashMapRoot) AsFloat() (float64, error) {
	return mixins.Map{"hamt.HashMapRoot"}.AsFloat()
}
func (HashMapRoot) AsString() (string, error) {
	return mixins.Map{"hamt.HashMapRoot"}.AsString()
}
func (HashMapRoot) AsBytes() ([]byte, error) {
	return mixins.Map{"hamt.HashMapRoot"}.AsBytes()
}
func (HashMapRoot) AsLink() (ipld.Link, error) {
	return mixins.Map{"hamt.HashMapRoot"}.AsLink()
}
func (HashMapRoot) Prototype() ipld.NodePrototype {
	return _HashMapRoot__Prototype{}
}

type _HashMapRoot__Prototype struct{}

func (_HashMapRoot__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _HashMapRoot__Builder
	nb.Reset()
	return &nb
}

type _HashMapRoot__Builder struct {
	_HashMapRoot__Assembler
}

func (nb *_HashMapRoot__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_HashMapRoot__Builder) Reset() {
	var w _HashMapRoot
	var m schema.Maybe
	*nb = _HashMapRoot__Builder{_HashMapRoot__Assembler{w: &w, m: &m}}
}

type _HashMapRoot__Assembler struct {
	w     *_HashMapRoot
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_hashAlg    _String__Assembler
	ca_bucketSize _Int__Assembler
	ca__map       _Bytes__Assembler
	ca_data       _List__Element__Assembler
}

func (na *_HashMapRoot__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_hashAlg.reset()
	na.ca_bucketSize.reset()
	na.ca__map.reset()
	na.ca_data.reset()
}

var (
	fieldBit__HashMapRoot_HashAlg     = 1 << 0
	fieldBit__HashMapRoot_BucketSize  = 1 << 1
	fieldBit__HashMapRoot_Map         = 1 << 2
	fieldBit__HashMapRoot_Data        = 1 << 3
	fieldBits__HashMapRoot_sufficient = 0 + 1<<0 + 1<<1 + 1<<2 + 1<<3
)

func (na *_HashMapRoot__Assembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_HashMapRoot{}
	}
	return na, nil
}
func (_HashMapRoot__Assembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"hamt.HashMapRoot"}.BeginList(0)
}
func (na *_HashMapRoot__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"hamt.HashMapRoot"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_HashMapRoot__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"hamt.HashMapRoot"}.AssignBool(false)
}
func (_HashMapRoot__Assembler) AssignInt(int) error {
	return mixins.MapAssembler{"hamt.HashMapRoot"}.AssignInt(0)
}
func (_HashMapRoot__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"hamt.HashMapRoot"}.AssignFloat(0)
}
func (_HashMapRoot__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"hamt.HashMapRoot"}.AssignString("")
}
func (_HashMapRoot__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"hamt.HashMapRoot"}.AssignBytes(nil)
}
func (_HashMapRoot__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"hamt.HashMapRoot"}.AssignLink(nil)
}
func (na *_HashMapRoot__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_HashMapRoot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.HashMapRoot", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_HashMapRoot__Assembler) Prototype() ipld.NodePrototype {
	return _HashMapRoot__Prototype{}
}
func (ma *_HashMapRoot__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_hashAlg.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_bucketSize.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca__map.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_data.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "hashAlg":
		if ma.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_HashAlg}
		}
		ma.s += fieldBit__HashMapRoot_HashAlg
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg, nil
	case "bucketSize":
		if ma.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_BucketSize}
		}
		ma.s += fieldBit__HashMapRoot_BucketSize
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize, nil
	case "map":
		if ma.s&fieldBit__HashMapRoot_Map != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Map}
		}
		ma.s += fieldBit__HashMapRoot_Map
		ma.state = maState_midValue
		ma.f = 2
		ma.ca__map.w = &ma.w._map
		ma.ca__map.m = &ma.cm
		return &ma.ca__map, nil
	case "data":
		if ma.s&fieldBit__HashMapRoot_Data != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Data}
		}
		ma.s += fieldBit__HashMapRoot_Data
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_data.w = &ma.w.data
		ma.ca_data.m = &ma.cm
		return &ma.ca_data, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot", Key: &_String{k}}
	}
}
func (ma *_HashMapRoot__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_HashMapRoot__KeyAssembler)(ma)
}
func (ma *_HashMapRoot__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg
	case 1:
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize
	case 2:
		ma.ca__map.w = &ma.w._map
		ma.ca__map.m = &ma.cm
		return &ma.ca__map
	case 3:
		ma.ca_data.w = &ma.w.data
		ma.ca_data.m = &ma.cm
		return &ma.ca_data
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_HashMapRoot__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_HashMapRoot__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _HashMapRoot__KeyAssembler _HashMapRoot__Assembler

func (_HashMapRoot__KeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.BeginMap(0)
}
func (_HashMapRoot__KeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.BeginList(0)
}
func (na *_HashMapRoot__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.AssignNull()
}
func (_HashMapRoot__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.AssignBool(false)
}
func (_HashMapRoot__KeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.AssignInt(0)
}
func (_HashMapRoot__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.AssignFloat(0)
}
func (ka *_HashMapRoot__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "hashAlg":
		if ka.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_HashAlg}
		}
		ka.s += fieldBit__HashMapRoot_HashAlg
		ka.state = maState_expectValue
		ka.f = 0
	case "bucketSize":
		if ka.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_BucketSize}
		}
		ka.s += fieldBit__HashMapRoot_BucketSize
		ka.state = maState_expectValue
		ka.f = 1
	case "map":
		if ka.s&fieldBit__HashMapRoot_Map != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Map}
		}
		ka.s += fieldBit__HashMapRoot_Map
		ka.state = maState_expectValue
		ka.f = 2
	case "data":
		if ka.s&fieldBit__HashMapRoot_Data != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Data}
		}
		ka.s += fieldBit__HashMapRoot_Data
		ka.state = maState_expectValue
		ka.f = 3
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot", Key: &_String{k}}
	}
	return nil
}
func (_HashMapRoot__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.AssignBytes(nil)
}
func (_HashMapRoot__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.KeyAssembler"}.AssignLink(nil)
}
func (ka *_HashMapRoot__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_HashMapRoot__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (HashMapRoot) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n HashMapRoot) Representation() ipld.Node {
	return (*_HashMapRoot__Repr)(n)
}

type _HashMapRoot__Repr _HashMapRoot

var (
	fieldName__HashMapRoot_HashAlg_serial    = _String{"hashAlg"}
	fieldName__HashMapRoot_BucketSize_serial = _String{"bucketSize"}
	fieldName__HashMapRoot_Map_serial        = _String{"map"}
	fieldName__HashMapRoot_Data_serial       = _String{"data"}
)
var _ ipld.Node = &_HashMapRoot__Repr{}

func (_HashMapRoot__Repr) ReprKind() ipld.ReprKind {
	return ipld.ReprKind_Map
}
func (n *_HashMapRoot__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "hashAlg":
		return n.hashAlg.Representation(), nil
	case "bucketSize":
		return n.bucketSize.Representation(), nil
	case "map":
		return n._map.Representation(), nil
	case "data":
		return n.data.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_HashMapRoot__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_HashMapRoot__Repr) LookupByIndex(idx int) (ipld.Node, error) {
	return mixins.Map{"hamt.HashMapRoot.Repr"}.LookupByIndex(0)
}
func (n _HashMapRoot__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_HashMapRoot__Repr) MapIterator() ipld.MapIterator {
	return &_HashMapRoot__ReprMapItr{n, 0}
}

type _HashMapRoot__ReprMapItr struct {
	n   *_HashMapRoot__Repr
	idx int
}

func (itr *_HashMapRoot__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 4 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__HashMapRoot_HashAlg_serial
		v = itr.n.hashAlg.Representation()
	case 1:
		k = &fieldName__HashMapRoot_BucketSize_serial
		v = itr.n.bucketSize.Representation()
	case 2:
		k = &fieldName__HashMapRoot_Map_serial
		v = itr.n._map.Representation()
	case 3:
		k = &fieldName__HashMapRoot_Data_serial
		v = itr.n.data.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_HashMapRoot__ReprMapItr) Done() bool {
	return itr.idx >= 4
}
func (_HashMapRoot__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_HashMapRoot__Repr) Length() int {
	l := 4
	return l
}
func (_HashMapRoot__Repr) IsAbsent() bool {
	return false
}
func (_HashMapRoot__Repr) IsNull() bool {
	return false
}
func (_HashMapRoot__Repr) AsBool() (bool, error) {
	return mixins.Map{"hamt.HashMapRoot.Repr"}.AsBool()
}
func (_HashMapRoot__Repr) AsInt() (int, error) {
	return mixins.Map{"hamt.HashMapRoot.Repr"}.AsInt()
}
func (_HashMapRoot__Repr) AsFloat() (float64, error) {
	return mixins.Map{"hamt.HashMapRoot.Repr"}.AsFloat()
}
func (_HashMapRoot__Repr) AsString() (string, error) {
	return mixins.Map{"hamt.HashMapRoot.Repr"}.AsString()
}
func (_HashMapRoot__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"hamt.HashMapRoot.Repr"}.AsBytes()
}
func (_HashMapRoot__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"hamt.HashMapRoot.Repr"}.AsLink()
}
func (_HashMapRoot__Repr) Prototype() ipld.NodePrototype {
	return _HashMapRoot__ReprPrototype{}
}

type _HashMapRoot__ReprPrototype struct{}

func (_HashMapRoot__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _HashMapRoot__ReprBuilder
	nb.Reset()
	return &nb
}

type _HashMapRoot__ReprBuilder struct {
	_HashMapRoot__ReprAssembler
}

func (nb *_HashMapRoot__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_HashMapRoot__ReprBuilder) Reset() {
	var w _HashMapRoot
	var m schema.Maybe
	*nb = _HashMapRoot__ReprBuilder{_HashMapRoot__ReprAssembler{w: &w, m: &m}}
}

type _HashMapRoot__ReprAssembler struct {
	w     *_HashMapRoot
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_hashAlg    _String__ReprAssembler
	ca_bucketSize _Int__ReprAssembler
	ca__map       _Bytes__ReprAssembler
	ca_data       _List__Element__ReprAssembler
}

func (na *_HashMapRoot__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_hashAlg.reset()
	na.ca_bucketSize.reset()
	na.ca__map.reset()
	na.ca_data.reset()
}
func (na *_HashMapRoot__ReprAssembler) BeginMap(int) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_HashMapRoot{}
	}
	return na, nil
}
func (_HashMapRoot__ReprAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"hamt.HashMapRoot.Repr"}.BeginList(0)
}
func (na *_HashMapRoot__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"hamt.HashMapRoot.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_HashMapRoot__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"hamt.HashMapRoot.Repr"}.AssignBool(false)
}
func (_HashMapRoot__ReprAssembler) AssignInt(int) error {
	return mixins.MapAssembler{"hamt.HashMapRoot.Repr"}.AssignInt(0)
}
func (_HashMapRoot__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"hamt.HashMapRoot.Repr"}.AssignFloat(0)
}
func (_HashMapRoot__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"hamt.HashMapRoot.Repr"}.AssignString("")
}
func (_HashMapRoot__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"hamt.HashMapRoot.Repr"}.AssignBytes(nil)
}
func (_HashMapRoot__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"hamt.HashMapRoot.Repr"}.AssignLink(nil)
}
func (na *_HashMapRoot__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_HashMapRoot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.ReprKind() != ipld.ReprKind_Map {
		return ipld.ErrWrongKind{TypeName: "hamt.HashMapRoot.Repr", MethodName: "AssignNode", AppropriateKind: ipld.ReprKindSet_JustMap, ActualKind: v.ReprKind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_HashMapRoot__ReprAssembler) Prototype() ipld.NodePrototype {
	return _HashMapRoot__ReprPrototype{}
}
func (ma *_HashMapRoot__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "hashAlg":
		if ma.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_HashAlg_serial}
		}
		ma.s += fieldBit__HashMapRoot_HashAlg
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg, nil
	case "bucketSize":
		if ma.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_BucketSize_serial}
		}
		ma.s += fieldBit__HashMapRoot_BucketSize
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize, nil
	case "map":
		if ma.s&fieldBit__HashMapRoot_Map != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Map_serial}
		}
		ma.s += fieldBit__HashMapRoot_Map
		ma.state = maState_midValue
		ma.f = 2
		ma.ca__map.w = &ma.w._map
		ma.ca__map.m = &ma.cm
		return &ma.ca__map, nil
	case "data":
		if ma.s&fieldBit__HashMapRoot_Data != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Data_serial}
		}
		ma.s += fieldBit__HashMapRoot_Data
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_data.w = &ma.w.data
		ma.ca_data.m = &ma.cm
		return &ma.ca_data, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot.Repr", Key: &_String{k}}
	}
}
func (ma *_HashMapRoot__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_HashMapRoot__ReprKeyAssembler)(ma)
}
func (ma *_HashMapRoot__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_hashAlg.w = &ma.w.hashAlg
		ma.ca_hashAlg.m = &ma.cm
		return &ma.ca_hashAlg
	case 1:
		ma.ca_bucketSize.w = &ma.w.bucketSize
		ma.ca_bucketSize.m = &ma.cm
		return &ma.ca_bucketSize
	case 2:
		ma.ca__map.w = &ma.w._map
		ma.ca__map.m = &ma.cm
		return &ma.ca__map
	case 3:
		ma.ca_data.w = &ma.w.data
		ma.ca_data.m = &ma.cm
		return &ma.ca_data
	default:
		panic("unreachable")
	}
}
func (ma *_HashMapRoot__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	//FIXME check if all required fields are set
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_HashMapRoot__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_HashMapRoot__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _HashMapRoot__ReprKeyAssembler _HashMapRoot__ReprAssembler

func (_HashMapRoot__ReprKeyAssembler) BeginMap(sizeHint int) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.BeginMap(0)
}
func (_HashMapRoot__ReprKeyAssembler) BeginList(sizeHint int) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_HashMapRoot__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.AssignNull()
}
func (_HashMapRoot__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.AssignBool(false)
}
func (_HashMapRoot__ReprKeyAssembler) AssignInt(int) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.AssignInt(0)
}
func (_HashMapRoot__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_HashMapRoot__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "hashAlg":
		if ka.s&fieldBit__HashMapRoot_HashAlg != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_HashAlg_serial}
		}
		ka.s += fieldBit__HashMapRoot_HashAlg
		ka.state = maState_expectValue
		ka.f = 0
	case "bucketSize":
		if ka.s&fieldBit__HashMapRoot_BucketSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_BucketSize_serial}
		}
		ka.s += fieldBit__HashMapRoot_BucketSize
		ka.state = maState_expectValue
		ka.f = 1
	case "map":
		if ka.s&fieldBit__HashMapRoot_Map != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Map_serial}
		}
		ka.s += fieldBit__HashMapRoot_Map
		ka.state = maState_expectValue
		ka.f = 2
	case "data":
		if ka.s&fieldBit__HashMapRoot_Data != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__HashMapRoot_Data_serial}
		}
		ka.s += fieldBit__HashMapRoot_Data
		ka.state = maState_expectValue
		ka.f = 3
	default:
		return ipld.ErrInvalidKey{TypeName: "hamt.HashMapRoot.Repr", Key: &_String{k}}
	}
	return nil
}
func (_HashMapRoot__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_HashMapRoot__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"hamt.HashMapRoot.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_HashMapRoot__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_HashMapRoot__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
